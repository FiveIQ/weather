{"version":3,"sources":["apis/weather.js","actions/index.js","history.js","components/Card.js","components/Hourly.js","components/Search.js","components/Current.js","components/App.js","reducers/index.js","reducers/mainreducer.js","index.js"],"names":["axios","create","baseURL","params","appid","units","fetch5dayforecast","latitude","longitude","dispatch","a","weather","get","lat","lon","response","type","payload","data","daily","console","log","fetchtimezone","timezone_offset","setcurrentcard","history","createBrowserHistory","basename","Card","dt","date","Date","this","props","timezone","timezoneoffset","toUTCString","String","substr","getUTCDay","icon","src","alt","className","temp","Fragment","morn","fromCharCode","day","eve","night","sunrise","sunset","convert","unix_timestamp","hours","getUTCHours","minutes","getMinutes","seconds","getSeconds","weatherdata","map","index","to","onClick","location","pathname","style","flex","renderweekday","renderdate","renderimage","max","min","description","renderfeelslike","feels_like","rendersun","display","justifyContent","width","rendercards","React","Component","cardcomponent","connect","state","Object","values","mainreducer","timezonereducer","Hourly","maintimezone","hourlydata","filtered","filter","utcToDay","maindays","currentcard","graph","time","main","wind","speed","margin","xMax","yMax","x","d","y","xScale","scaleLinear","range","domain","extent","yScale","ScaleSVG","height","Group","top","left","LinearGradient","from","id","AxisLeft","scale","label","stroke","tickTextFill","AxisBottom","AreaClosed","fill","rendergraph","setgraph","hourlycomponent","hourlyreducer","currentcardreducer","SearchForm","renderInput","formProps","meta","error","touched","input","autoComplete","renderError","onSubmit","formValues","fetchhourly","fetchlocation","currentdetails","push","handleSubmit","Field","name","component","Search","reduxForm","form","validate","errors","searchcomponent","city","list","current","Current","country","renderlocation","renderdetails","currentcomponent","locationreducer","currentdetailsreducer","App","combineReducers","action","_","mapKeys","reducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"gQAIeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,0CACTC,OAAQ,CACJC,MALI,mCAMJC,MAAO,YCNFC,EAAoB,SAACC,EAAUC,GAAX,8CAAyB,WAAMC,GAAN,eAAAC,EAAA,+EAE/BC,EAAQC,IAAI,WAAY,CAACT,OAAQ,CAACU,IAAKN,EAAUO,IAAKN,KAFvB,cAEhDO,EAFgD,OAGtDN,EAAU,CACNO,KAAM,gBACNC,QAASF,EAASG,KAAKC,QAL2B,0DAUtDC,QAAQC,IAAI,uBAV0C,4EAAzB,uDAepBC,EAAgB,SAACf,EAAUC,GAAX,8CAAyB,WAAMC,GAAN,eAAAC,EAAA,+EAEvBC,EAAQC,IAAI,WAAY,CAACT,OAAQ,CAACU,IAAKN,EAAUO,IAAKN,KAF/B,cAExCO,EAFwC,OAI9CK,QAAQC,IAAIN,GACZN,EAAU,CACNO,KAAM,iBACNC,QAASF,EAASG,KAAKK,kBAPmB,0DAa9CH,QAAQC,IAAI,uBAbkC,4EAAzB,uDAkDhBG,EAAiB,SAACN,GAC3B,MAAO,CACLF,KAAM,kBACNC,QAASC,I,QCjEAO,EAHCC,YAAqB,CAAEC,SAAU,gBCK3CC,E,yKAESC,GACP,IAAIC,EAAQ,IAAIC,KAA6C,KAAvCF,EAAGG,KAAKC,MAAMC,SAASC,iBAAuBC,cACpE,OAAOC,OAAOP,GAAMQ,OAAO,EAAE,M,oCAGnBT,GAGV,MADW,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAD7D,IAAIE,KAA6C,KAAvCF,EAAGG,KAAKC,MAAMC,SAASC,iBAE3BI,e,kCAGTC,GACR,OAAO,qBAAKC,IAAG,2CAAsCD,EAAtC,WAAqDE,IAAM,cAAcC,UAAY,mC,sCAGxFC,GACZ,OACI,eAAC,IAAMC,SAAP,WACI,qBAAKF,UAAU,wBAAf,wBAIA,sBAAKA,UAAU,6BAAf,mBACWC,EAAKE,KADhB,IACuBT,OAAOU,aAAa,KAD3C,IAEI,uBAFJ,QAGUH,EAAKI,IAHf,IAGqBX,OAAOU,aAAa,KAHzC,IAII,uBAJJ,QAKUH,EAAKK,IALf,IAKqBZ,OAAOU,aAAa,KALzC,IAMI,uBANJ,UAOYH,EAAKM,MAPjB,IAOyBb,OAAOU,aAAa,KAP7C,Y,gCAaFI,EAASC,GAAQ,IAAD,OAClBC,EAAU,SAACC,GACX,IAAIxB,EAAO,IAAIC,KAA0D,KAApDuB,EAAe,EAAKrB,MAAMC,SAASC,iBACpDoB,EAAQzB,EAAK0B,cACbC,EAAU,IAAM3B,EAAK4B,aACrBC,EAAU,IAAM7B,EAAK8B,aAEzB,OADoBL,EAAQ,IAAME,EAAQnB,QAAQ,GAAK,IAAMqB,EAAQrB,QAAQ,IAIjF,OACI,eAAC,IAAMO,SAAP,WACI,qBAAKF,UAAU,wBAAf,qBAIA,qBAAKA,UAAU,6BAAf,SACKU,EAAQF,KAGb,uBAEA,qBAAKR,UAAU,wBAAf,oBAIA,qBAAKA,UAAU,6BAAf,SACKU,EAAQD,U,oCAMX,IAAD,OACT,OAAKpB,KAAKC,MAAM4B,YAAY,IACvB7B,KAAKC,MAAMC,SAETF,KAAKC,MAAM4B,YAAYC,KAAI,SAAC5C,EAAK6C,GACpC,OAAIA,EAAO,EAAU,KAGrB,cAAC,IAAD,CAAMC,GAAE,WAAOD,GAASE,QAAW,kBAAM,EAAKhC,MAAMT,eAAeuC,IAAsBpB,UAAS,UAAK,IAAMoB,IAAUtC,EAAQyC,SAASC,SAAW,QAAU,GAA3D,SAAlG,SAEI,sBAAKxB,UAAU,8BAA8ByB,MAAO,CAACC,KAAM,KAA3D,UACA,sBAAK1B,UAAY,kBAAjB,UAEI,qBAAKA,UAAY,wBAAjB,SACK,EAAK2B,cAAcpD,EAAKW,MAG7B,qBAAKc,UAAU,6BAAf,SACK,EAAK4B,WAAWrD,EAAKW,MAG1B,uBACA,qBAAKc,UAAU,iBAAf,SACK,EAAK6B,YAAYtD,EAAKP,QAAQ,GAAG6B,QAGtC,qBAAIG,UAAY,+BAAhB,0BACczB,EAAK0B,KAAK6B,IADxB,YAC+BpC,OAAOU,aAAa,KADnD,KAEI,uBAFJ,eAGa7B,EAAK0B,KAAK8B,IAHvB,YAG8BrC,OAAOU,aAAa,KAHlD,QAMA,qBAAKJ,UAAU,6BAAf,SACKzB,EAAKP,QAAQ,GAAGgE,iBAIzB,sBAAKhC,UAAY,iBAAjB,UACK,EAAKiC,gBAAgB1D,EAAK2D,YAC3B,uBACC,EAAKC,UAAU5D,EAAKiC,QAASjC,EAAKkC,eAhCuCW,MAP9C,O,+BAkDxC,OACI,qBAAKK,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACI,qBAAKZ,MAAQ,CAACa,MAAO,OAArB,SACI,qBAAKtC,UAAY,kCAAjB,SACKX,KAAKkD,wB,GA7HXC,IAAMC,WA8IVC,EADOC,aAPE,SAACC,GACrB,MAAO,CACH1B,YAAa2B,OAAOC,OAAOF,EAAMG,aACjCxD,SAAUqD,EAAMI,mBAIuB,CAACrF,oBAAmBgB,gBAAeE,kBAA5D8D,CAA6E1D,G,0FCtI7FgE,E,uKAEO/D,GAEL,OADW,IAAIE,KAAiD,KAA3CF,EAAGG,KAAKC,MAAM4D,aAAa1D,iBACpCI,c,8BAGRe,GACJ,IAAIxB,EAAO,IAAIC,KAA8D,KAAxDuB,EAAetB,KAAKC,MAAM4D,aAAa1D,iBAK5D,OAJYL,EAAK0B,eACH,IAAM1B,EAAK4B,cACYpB,QAAQ,GAAI,K,oCAKvC,IAAD,OACT,IAAKN,KAAKC,MAAM6D,WAAW,GAAK,OAAO,KAEvC,IAAIC,EAAW/D,KAAKC,MAAM6D,WAAWE,QAAO,SAAA9E,GAAI,OAAK,EAAK+E,SAAS/E,EAAKW,MAAQ,EAAKoE,SAAS,EAAKhE,MAAMiE,SAAS,EAAKjE,MAAMkE,YAAYjF,MAAMW,OAE/I,GAAqC,SAAjCG,KAAKC,MAAMkE,YAAYC,MACvB,IAAIlF,EAAQ6E,EAASjC,KAAI,SAAA5C,GAAI,MAAM,CAACmF,KAAM,EAAKhD,QAAQnC,EAAKW,IAAKe,KAAM1B,EAAKoF,KAAK1D,aAG3C,SAAjCZ,KAAKC,MAAMkE,YAAYC,QAC5BlF,EAAQ6E,EAASjC,KAAI,SAAA5C,GAAI,MAAM,CAACmF,KAAM,EAAKhD,QAAQnC,EAAKW,IAAKe,KAAM1B,EAAKqF,KAAKC,WAKjF,IAGMC,EACG,GADHA,EAGI,GAGJC,EATQ,IASOD,EAFV,GAGLE,EATS,IASOF,EALV,GAONG,EAAI,SAAAC,GAAC,OAAI,IAAI9E,KAAK8E,EAAER,OACpBS,EAAI,SAAAD,GAAC,OAAIA,EAAEjE,MAEXmE,EAASC,YAAY,CACvBC,MAAO,CAAC,EAAGP,GACXQ,OAAQC,YAAOjG,EAAM0F,KAEnBQ,EAASJ,YAAY,CACvBC,MAAO,CAACN,EAAM,GACdO,OAAQ,CAACxC,YAAIxD,EAAK4F,GAAIrC,YAAIvD,EAAM4F,MA2CpC,OAvCI,cAACO,EAAA,EAAD,CAAUpC,MAzBA,IAyBcqC,OAxBb,IAwBX,SACE,eAACC,EAAA,EAAD,CAAOC,IAAKf,EAAYgB,KAAMhB,EAA9B,UAEE,cAACiB,EAAA,EAAD,CACIC,KAAK,UACL3D,GAAG,UACH4D,GAAG,aAGP,cAACC,EAAA,EAAD,CACIC,MAAOV,EACPI,IAAK,EACLC,KAAM,EACNM,MAAwC,SAAjC/F,KAAKC,MAAMkE,YAAYC,MAAvB,eAAkD/D,OAAOU,aAAa,KAAtE,KAAgF,YACvFiF,OAAQ,UACRC,aAAc,YAGlB,cAACC,EAAA,EAAD,CACIJ,MAAOf,EACPS,IAAKb,EACLoB,MAAO,kBACPC,OAAQ,UACRC,aAAc,YAIlB,cAACE,EAAA,EAAD,CACEjH,KAAMA,EACN0F,EAAG,SAAAC,GAAC,OAAIE,EAAOH,EAAEC,KACjBC,EAAG,SAAAD,GAAC,OAAIO,EAAON,EAAED,KACjBO,OAAQA,EACRgB,KAAM,iBACNJ,OAAQ,iB,+BAUb,IAAD,OACJ,OACI,eAAC,IAAMnF,SAAP,WACI,qBAAKuB,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACI,qBAAKZ,MAAS,CAACa,MAAO,OAAtB,SACCjD,KAAKqG,kBAIV,qBAAKjE,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACI,sBAAKZ,MAAS,CAACa,MAAO,OAAQtC,UAAY,iBAA1C,UACI,wBAAQsB,QAAW,kBAAM,EAAKhC,MAAMqG,SAAS,SAAS3F,UAAS,oBAAgD,SAAjCX,KAAKC,MAAMkE,YAAYC,MAAmB,SAAW,IAAnI,kBAIA,wBAAQnC,QAAW,kBAAM,EAAKhC,MAAMqG,SAAS,SAAS3F,UAAS,oBAAgD,SAAjCX,KAAKC,MAAMkE,YAAYC,MAAmB,SAAW,IAAnI,uBAOR,qBAAKhC,MAAQ,CAACkD,OAAQ,iB,GAzHjBnC,IAAMC,WA6IZmD,EADSjD,aAVA,SAACC,GACrB,MAAO,CACHO,WAAYN,OAAOC,OAAOF,EAAMiD,eAChCtC,SAAUV,OAAOC,OAAOF,EAAMG,aAC9BG,aAAcN,EAAMI,gBACpBQ,YAAaZ,EAAMkD,sBAKsB,CAACH,SHhF1B,SAACpH,GACrB,MAAO,CACLF,KAAM,YACNC,QAASC,KG6ESoE,CAAqCM,G,0BClJvD8C,E,4MA0BFC,YAAc,SAACC,GACX,IAAMjG,EAAS,gBAAYiG,EAAUC,KAAKC,OAASF,EAAUC,KAAKE,QAAU,QAAU,IACtF,OACI,sBAAKpG,UAAaA,EAAlB,UACI,gCAAQiG,EAAUb,QAClB,iDAAWa,EAAUI,OAArB,IAA4BC,aAAe,SAC1C,EAAKC,YAAYN,EAAUC,U,EAKxCM,SAAW,SAACC,GACR,EAAKnH,MAAMoH,YAAYD,EAAW7I,SAAU6I,EAAW5I,WACvD,EAAKyB,MAAM3B,kBAAkB8I,EAAW7I,SAAU6I,EAAW5I,WAC7D,EAAKyB,MAAMqH,cAAcF,EAAW7I,SAAU6I,EAAW5I,WACzD,EAAKyB,MAAMX,cAAc8H,EAAW7I,SAAU6I,EAAW5I,WACzD,EAAKyB,MAAMsH,eAAeH,EAAW7I,SAAU6I,EAAW5I,Y,kEAvC1DwB,KAAKC,MAAM3B,kBAAkB,SAAU,QACvC0B,KAAKC,MAAMqH,cAAc,SAAU,QACnCtH,KAAKC,MAAMX,cAAc,SAAU,QACnCU,KAAKC,MAAMsH,eAAe,SAAU,QACpCvH,KAAKC,MAAMoH,YAAY,SAAU,QAC5B5H,EAAQyC,SAASC,SAAS,IAC3B1C,EAAQ+H,KAAK,MAEjBxH,KAAKC,MAAMT,eAAeC,EAAQyC,SAASC,SAAS,M,kCAG5C0E,GACR,GAAIA,EAAKE,SAAWF,EAAKC,MACrB,OACI,qBAAKnG,UAAY,mBAAjB,SACI,qBAAKA,UAAY,SAAjB,SAA2BkG,EAAKC,Y,+BA6B5C,OACI,qBAAK1E,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACA,uBAAMmE,SAAYnH,KAAKC,MAAMwH,aAAazH,KAAKmH,UAAWxG,UAAU,gBAAgByB,MAAQ,CAACa,MAAO,OAApG,UACI,sBAAKtC,UAAY,aAAjB,UAEA,cAAC+G,EAAA,EAAD,CAAOC,KAAO,WAAWC,UAAa5H,KAAK2G,YAAaZ,MAAQ,mBAChE,cAAC2B,EAAA,EAAD,CAAOC,KAAO,YAAYC,UAAa5H,KAAK2G,YAAaZ,MAAQ,uBAEjE,wBAAQpF,UAAY,4BAApB,6B,GAvDSwC,IAAMC,WA4EzByE,EAAUC,YAAU,CAACC,KAAM,aAAcC,SAb9B,SAACZ,GACd,IAAMa,EAAS,GASf,OAPKb,EAAW7I,WACZ0J,EAAO1J,SAAW,uBAEjB6I,EAAW5I,YACZyJ,EAAOzJ,UAAY,uBAGhByJ,IAGKH,CAA0CpB,GAG3CwB,EAFS5E,YAAQ,KAAM,CAACgE,cJlCV,SAAC/I,EAAUC,GAAX,8CAAyB,WAAMC,GAAN,eAAAC,EAAA,+EAEvBC,EAAQC,IAAI,YAAa,CAACT,OAAQ,CAACU,IAAKN,EAAUO,IAAKN,KAFhC,cAExCO,EAFwC,OAI9CN,EAAU,CACNO,KAAM,iBACNC,QAASF,EAASG,KAAKiJ,OANmB,0DAW9C/I,QAAQC,IAAI,uBAXkC,4EAAzB,uDIkCyBf,oBAAmB+I,YJlD9C,SAAC9I,EAAUC,GAAX,8CAAyB,WAAMC,GAAN,eAAAC,EAAA,+EAErBC,EAAQC,IAAI,YAAa,CAACT,OAAQ,CAACU,IAAKN,EAAUO,IAAKN,KAFlC,cAEtCO,EAFsC,OAG5CK,QAAQC,IAAIN,GACZN,EAAU,CACNO,KAAM,cACNC,QAASF,EAASG,KAAKkJ,OANiB,0DAW5ChJ,QAAQC,IAAI,uBAXgC,4EAAzB,uDIkD2DC,gBAAeiI,eJJrE,SAAChJ,EAAUC,GAAX,8CAAyB,WAAMC,GAAN,eAAAC,EAAA,+EAE1BC,EAAQC,IAAI,WAAY,CAACT,OAAQ,CAACU,IAAKN,EAAUO,IAAKN,KAF5B,cAE3CO,EAF2C,OAIjDN,EAAU,CACNO,KAAM,uBACNC,QAASF,EAASG,KAAKmJ,UANsB,0DAWjDjJ,QAAQC,IAAI,uBAXqC,4EAAzB,uDIIqFG,kBAA7F8D,CAA8GuE,GClFhIS,E,+KAGE,OAAKtI,KAAKC,MAAMiC,SAASA,SAEpBlC,KAAKC,MAAMiC,SAASA,SAASyF,KAC3B,uCAAQ3H,KAAKC,MAAMiC,SAASA,SAASyF,KAArC,aAA8C3H,KAAKC,MAAMiC,SAASA,SAASqG,WADlC,yCAFL,O,8BAOvCjH,GACJ,IAAIxB,EAAO,IAAIC,KAA0D,KAApDuB,EAAetB,KAAKC,MAAMC,SAASC,iBAEpDoB,EAAQzB,EAAK0B,cACbC,EAAU,IAAM3B,EAAK4B,aAEzB,MAJW,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAG/C5B,EAAKS,aAAe,IAAMgB,EAAQ,IAAME,EAAQnB,QAAQ,K,sCAKjF,OAAKN,KAAKC,MAAMoI,QAAQA,QAGpB,eAAC,IAAMxH,SAAP,WACI,qBAAKJ,IAAG,2CAAsCT,KAAKC,MAAMoI,QAAQA,QAAQ1J,QAAQ,GAAG6B,KAA5E,WAA2FE,IAAM,cAAcC,UAAY,kBACnI,uCACIX,KAAKC,MAAMoI,QAAQA,QAAQzH,KAD/B,YACuCP,OAAOU,aAAa,KAD3D,iBACwEf,KAAKqB,QAAQrB,KAAKC,MAAMoI,QAAQA,QAAQxI,IADhH,4BACuIG,KAAKC,MAAMoI,QAAQA,QAAQxF,WADlK,YACgLxC,OAAOU,aAAa,KADpM,UALiC,O,+BAazC,OACI,eAAC,IAAMF,SAAP,WAEI,qBAAKuB,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACKhD,KAAKwI,mBAGV,qBAAKpG,MAAQ,CAACW,QAAS,OAAQC,eAAgB,UAA/C,SACKhD,KAAKyI,yB,GAzCJtF,IAAMC,WA2DbsF,EADUpF,aARD,SAACC,GACrB,MAAO,CACHrB,SAAUqB,EAAMoF,gBAChBzI,SAAUqD,EAAMI,gBAChB0E,QAAS9E,EAAMqF,yBAI2B,KAAzBtF,CAA+BgF,GChCzCO,EApBH,WAIR,OACA,8BACI,eAAC,IAAD,CAAQpJ,QAAWA,EAAnB,UACI,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,U,0BCjBGqJ,cAAgB,CAC3BpF,YCLuB,WAAwB,IAAvBH,EAAsB,uDAAd,GAAIwF,EAAU,uCAC9C,OAAOA,EAAO/J,MACV,IAAK,gBACD,OAAO,eAAIgK,IAAEC,QAAQF,EAAO9J,QAAS,OAEzC,QACI,OAAOsE,IDAfiD,cCIyB,WAAwB,IAAvBjD,EAAsB,uDAAd,GAAIwF,EAAU,uCAChD,OAAOA,EAAO/J,MACV,IAAK,cACD,OAAO,eAAIgK,IAAEC,QAAQF,EAAO9J,QAAS,OAEzC,QACI,OAAOsE,IDTfwE,KAAMmB,IACNP,gBCY2B,WAAwB,IAAvBpF,EAAsB,uDAAd,GAAIwF,EAAU,uCAClD,OAAOA,EAAO/J,MACV,IAAK,iBACD,OAAO,2BAAIuE,GAAX,IAAkB,SAAYwF,EAAO9J,UAEzC,QACI,OAAOsE,IDjBfI,gBCqB2B,WAAwB,IAAvBJ,EAAsB,uDAAd,GAAIwF,EAAU,uCAClD,OAAOA,EAAO/J,MACV,IAAK,iBACD,OAAO,2BAAIuE,GAAX,IAAkB,eAAkBwF,EAAO9J,UAE/C,QACI,OAAOsE,ID1BfkD,mBC8B8B,WAAsC,IAArClD,EAAoC,uDAA9B,CAAC,MAAS,QAASwF,EAAW,uCACnE,OAAOA,EAAO/J,MACV,IAAK,kBACD,OAAO,2BAAIuE,GAAX,IAAkB,KAAQwF,EAAO9J,UAErC,IAAK,YACD,OAAO,2BAAIsE,GAAX,IAAkB,MAASwF,EAAO9J,UAEtC,QACI,OAAOsE,IDtCfqF,sBC2CiC,WAAuB,IAAtBrF,EAAqB,uDAAf,GAAIwF,EAAW,uCACvD,OAAOA,EAAO/J,MACV,IAAK,uBACD,MAAO,CAAC,QAAW+J,EAAO9J,SAE9B,QACI,OAAOsE,MCrDb4F,GAAmBC,OAAOC,sCAAwCC,IAClEC,GAAQC,YAAYC,EAAUN,GAAiBO,YAAgBC,OAErEC,IAASC,OACL,cAAC,IAAD,CAAUN,MAASA,GAAnB,SACI,cAAC,EAAD,MAEJO,SAASC,cAAc,Y","file":"static/js/main.13d2d1e7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst KEY = \"15fa71971dd18bcbf15877023a801f54\";\n\nexport default axios.create({\n    baseURL: 'https://api.openweathermap.org/data/2.5',\n    params: {\n        appid: KEY,\n        units: 'metric'\n    }\n});\n\n","import weather from '../apis/weather.js';\n\nexport const fetch5dayforecast = (latitude, longitude) => async dispatch =>{\n   try {\n    const response = await weather.get('/onecall', {params: {lat: latitude, lon: longitude}});\n    dispatch( {\n        type: \"LIST_FORECAST\",\n        payload: response.data.daily\n    });\n    return;\n}\n   catch (error){\n    console.log(\"Invalid Coordinates\");\n    return;\n   }\n};\n\nexport const fetchtimezone = (latitude, longitude) => async dispatch =>{\n    try{\n        const response = await weather.get('/onecall', {params: {lat: latitude, lon: longitude}});\n\n        console.log(response);\n        dispatch( {\n            type: \"FETCH_TIMEZONE\",\n            payload: response.data.timezone_offset\n        });\n        return;\n    }\n\n    catch (error){\n        console.log(\"Invalid Coordinates\");\n        return;\n    }\n};\n\nexport const fetchhourly = (latitude, longitude) => async dispatch =>{\n    try{\n        const response = await weather.get('/forecast', {params: {lat: latitude, lon: longitude}});\n        console.log(response);\n        dispatch( {\n            type: \"LIST_HOURLY\",\n            payload: response.data.list\n        });\n        return;\n    }\n    catch (error){\n        console.log(\"Invalid Coordinates\");\n        return;\n    }\n};\n\nexport const fetchlocation = (latitude, longitude) => async dispatch =>{\n    try{\n        const response = await weather.get('/forecast', {params: {lat: latitude, lon: longitude}});\n\n        dispatch( {\n            type: \"FETCH_LOCATION\",\n            payload: response.data.city\n        });\n        return;\n    }\n    catch (error){\n        console.log(\"Invalid Coordinates\");\n        return;\n    }\n};\n\nexport const setcurrentcard = (data) => {\n    return { \n      type: \"SET_CURRENTCARD\",\n      payload: data\n    };\n  };\n\nexport const setgraph = (data) => {\n    return { \n      type: \"SET_GRAPH\",\n      payload: data\n    };\n  };\n\n  export const currentdetails = (latitude, longitude) => async dispatch =>{\n    try{\n        const response = await weather.get('/onecall', {params: {lat: latitude, lon: longitude}});\n\n        dispatch( {\n            type: \"FETCH_CURRENTDETAILS\",\n            payload: response.data.current\n        });\n        return;\n    }\n    catch (error){\n        console.log(\"Invalid Coordinates\");\n        return;\n    }\n};","import {createBrowserHistory} from 'history';\n\nconst history = createBrowserHistory({ basename: '/weatherapp' });\n\n\nexport default history;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nimport {fetch5dayforecast, fetchtimezone, setcurrentcard} from '../actions/index.js'\nimport history from '../history'\n\nclass Card extends React.Component {\n\n    renderdate(dt){\n        let date = (new Date((dt+this.props.timezone.timezoneoffset)*1000)).toUTCString();\n        return String(date).substr(4,13); //remove the time off the dates\n    }\n\n    renderweekday(dt){\n        let date = new Date((dt+this.props.timezone.timezoneoffset)*1000);\n        let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n        return days[date.getUTCDay()];\n    }\n\n    renderimage(icon){\n        return <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt = \"weathericon\" className = \"ui center aligned tiny image\"/>;\n    }\n\n    renderfeelslike(temp){\n        return(\n            <React.Fragment>\n                <div className=\"center aligned header\">\n                    Feels Like\n                </div>\n\n                <div className=\"center aligned description\">\n                    Morn: {temp.morn} {String.fromCharCode(176)}C\n                    <br/>\n                    Day: {temp.day} {String.fromCharCode(176)}C\n                    <br/>\n                    Eve: {temp.eve} {String.fromCharCode(176)}C\n                    <br/>\n                    Night: {temp.night} {String.fromCharCode(176)}C\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    rendersun(sunrise, sunset){\n        let convert = (unix_timestamp) => {\n            let date = new Date((unix_timestamp+this.props.timezone.timezoneoffset)* 1000);\n            let hours = date.getUTCHours();\n            let minutes = \"0\" + date.getMinutes();\n            let seconds = \"0\" + date.getSeconds();\n            let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n            return formattedTime;\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"center aligned header\">\n                    Sunrise\n                </div>\n\n                <div className=\"center aligned description\">\n                    {convert(sunrise)}\n                </div>\n\n                <br/>\n\n                <div className=\"center aligned header\">\n                    Sunset\n                </div>\n\n                <div className=\"center aligned description\">\n                    {convert(sunset)}\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    rendercards(){ //will create all 5 cards\n        if (!this.props.weatherdata[0]) {return null;} //prevents calling while api is not loaded\n        if (!this.props.timezone) {return null;}\n\n        return this.props.weatherdata.map((data,index) => {\n            if (index >4){return null;} //only render 5 cards\n\n            return(\n            <Link to= {`/${index}`} onClick = {() => this.props.setcurrentcard(index)} key = {index} className={`${\"/\" + index === history.location.pathname ? 'black' : ''} card`} >\n\n                <div className=\"ui card slide masked reveal\" style={{flex: \"1\"}}> \n                <div className = \"visible content\">\n\n                    <div className = \"center aligned header\">\n                        {this.renderweekday(data.dt)}\n                    </div>\n\n                    <div className=\"center aligned description\">\n                        {this.renderdate(data.dt)}\n                    </div>\n\n                    <br/>\n                    <div className=\"center aligned\">\n                        {this.renderimage(data.weather[0].icon)}\n                    </div>\n\n                    <h1 className = \"center aligned ui sub header\">\n                        {`High: ${data.temp.max} ${String.fromCharCode(176)}C`}\n                        <br />\n                        {`Low: ${data.temp.min} ${String.fromCharCode(176)}C`}\n                    </h1>    \n\n                    <div className=\"center aligned description\">\n                        {data.weather[0].description}\n                    </div>\n                </div>\n\n                <div className = \"hidden content\">\n                    {this.renderfeelslike(data.feels_like)}\n                    <br/>\n                    {this.rendersun(data.sunrise, data.sunset)}\n                </div>\n\n                </div>\n            </Link>\n            );\n        });\n        \n    };\n\n    render(){\n        return (\n            <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n                <div style= {{width: \"70%\" }}>\n                    <div className = \"ui five doubling cards centered\">\n                        {this.rendercards()}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        weatherdata: Object.values(state.mainreducer),\n        timezone: state.timezonereducer,\n    };\n};\n\nconst cardcomponent = connect(mapStateToProps, {fetch5dayforecast, fetchtimezone, setcurrentcard})(Card);\nexport default cardcomponent;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport { scaleLinear } from '@vx/scale';\nimport { extent, max, min} from 'd3-array';\nimport { AreaClosed } from '@vx/shape';\nimport { Group} from '@vx/group';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\nimport { LinearGradient } from '@vx/gradient';\nimport { ScaleSVG } from '@vx/responsive';\n\nimport {setgraph} from '../actions/index.js'\n\n\nclass Hourly extends React.Component {\n\n    utcToDay(dt){\n        let date = new Date((dt+this.props.maintimezone.timezoneoffset)*1000);\n        return date.getUTCDay();\n    }\n\n    convert(unix_timestamp){\n        let date = new Date((unix_timestamp+this.props.maintimezone.timezoneoffset)* 1000);\n        let hours = date.getUTCHours();\n        let minutes = \"0\" + date.getMinutes();\n        let formattedTime = hours + (minutes.substr(-2))/60;\n\n        return formattedTime;\n    }\n\n    rendergraph(){\n        if (!this.props.hourlydata[0]) {return null;} //prevents calling while api is not loaded\n\n        let filtered = this.props.hourlydata.filter(data => (this.utcToDay(data.dt) === this.utcToDay(this.props.maindays[this.props.currentcard.data].dt)));\n        \n        if (this.props.currentcard.graph === \"temp\"){\n            var data = (filtered.map(data =>  ({time: this.convert(data.dt), temp: data.main.temp})));\n        }\n\n        else if (this.props.currentcard.graph === \"wind\"){\n            data = (filtered.map(data =>  ({time: this.convert(data.dt), temp: data.wind.speed})));\n        }\n\n        \n\n        const width = 1000;\n        const height = 400;\n        \n        const margin = {\n            top: 60,\n            bottom: 60,\n            left: 80,\n            right: 80,\n        };\n        const xMax = width - margin.left - margin.right;\n        const yMax = height - margin.top - margin.bottom;\n        \n        const x = d => new Date(d.time); // d.time is unix timestamps\n        const y = d => d.temp;\n\n        const xScale = scaleLinear({\n            range: [0, xMax],\n            domain: extent(data, x)\n        });\n        const yScale = scaleLinear({\n            range: [yMax, 0],\n            domain: [min(data,y), max(data, y)],\n        });\n\n        const chart = (\n            <ScaleSVG width={width} height={height}>\n              <Group top={margin.top} left={margin.left}>\n\n                <LinearGradient\n                    from='#fbc2eb'\n                    to='#a6c1ee'\n                    id='gradient'\n                />\n\n                <AxisLeft\n                    scale={yScale}\n                    top={0}\n                    left={0}\n                    label={this.props.currentcard.graph === \"temp\" ? `Temp ${String.fromCharCode(176)}C` : 'Wind (Km)'}\n                    stroke={'#1b1a1e'}\n                    tickTextFill={'#1b1a1e'}\n                />\n\n                <AxisBottom\n                    scale={xScale}\n                    top={yMax}\n                    label={'Hour of the Day'}\n                    stroke={'#1b1a1e'}\n                    tickTextFill={'#1b1a1e'}\n                />\n\n\n                <AreaClosed\n                  data={data}\n                  x={d => xScale(x(d))}\n                  y={d => yScale(y(d))}\n                  yScale={yScale}\n                  fill={\"url(#gradient)\"}\n                  stroke={\"black\"}\n                />\n              </Group>\n            </ScaleSVG>\n        )\n\n        return chart;\n    };\n\n    \n    render(){\n        return (\n            <React.Fragment>\n                <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n                    <div style = {{width: \"70%\"}}>\n                    {this.rendergraph()}\n                    </div>\n                </div>\n\n                <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n                    <div style = {{width: \"30%\"}} className = \"two ui buttons\">\n                        <button onClick = {() => this.props.setgraph(\"temp\")} className={`ui button ${this.props.currentcard.graph === \"temp\" ? 'active' : ''}`}>\n                            Temp\n                        </button>\n\n                        <button onClick = {() => this.props.setgraph(\"wind\")} className={`ui button ${this.props.currentcard.graph === \"wind\" ? 'active' : ''}`}>\n                            Wind\n                        </button>\n                        \n                    </div>\n                </div>\n\n                <div style ={{height: \"50px\"}} />\n\n                \n            </React.Fragment>\n        );\n    };\n\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        hourlydata: Object.values(state.hourlyreducer),\n        maindays: Object.values(state.mainreducer),\n        maintimezone: state.timezonereducer,\n        currentcard: state.currentcardreducer\n\n    };\n};\n\nconst hourlycomponent = connect(mapStateToProps, {setgraph})(Hourly);\nexport default hourlycomponent;","import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {connect} from 'react-redux';\n\nimport {fetch5dayforecast, fetchhourly, fetchlocation, fetchtimezone, currentdetails, setcurrentcard} from '../actions/index.js'\nimport history from '../history'\n\n\nclass SearchForm extends React.Component {\n    \n    componentDidMount(){\n        this.props.fetch5dayforecast(40.7128, -74.0060); //sets the intial location to new york\n        this.props.fetchlocation(40.7128, -74.0060);\n        this.props.fetchtimezone(40.7128, -74.0060);\n        this.props.currentdetails(40.7128, -74.0060);\n        this.props.fetchhourly(40.7128, -74.0060);\n        if (!history.location.pathname[1]){ //redirects to proper url so it can select card and update state\n            history.push('/0')\n        }\n        this.props.setcurrentcard(history.location.pathname[1]);\n    }\n\n    renderError(meta) {\n        if (meta.touched && meta.error){\n            return (\n                <div className = \"ui error message\">\n                    <div className = \"header\">{meta.error}</div>\n                </div>\n            );\n        }\n\n    };\n\n\n    renderInput = (formProps) => {\n        const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error' : ''}`;\n        return (\n            <div className = {className}>\n                <label>{formProps.label}</label>\n                <input {...formProps.input} autoComplete = \"off\"/>\n                {this.renderError(formProps.meta)}\n            </div>\n        );\n    };\n\n    onSubmit = (formValues) => {\n        this.props.fetchhourly(formValues.latitude, formValues.longitude);\n        this.props.fetch5dayforecast(formValues.latitude, formValues.longitude);\n        this.props.fetchlocation(formValues.latitude, formValues.longitude);\n        this.props.fetchtimezone(formValues.latitude, formValues.longitude);\n        this.props.currentdetails(formValues.latitude, formValues.longitude);\n\n    };\n\n    render(){\n        return (\n            <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className=\"ui form error\" style= {{width: \"60%\" }}>\n                <div className = \"two fields\">\n                    \n                <Field name = \"latitude\" component = {this.renderInput} label = \"Enter Latitude\"/>\n                <Field name = \"longitude\" component = {this.renderInput} label = \"Enter Longitude\"/>\n                </div>\n                <button className = \"ui button secondary fluid\">Submit</button>\n            </form>\n            </div>\n        );\n    };\n\n};\n\nconst validate = (formValues) =>{\n    const errors = {};\n\n    if (!formValues.latitude){\n        errors.latitude = \"Enter a Valid Value\"\n    }\n    if (!formValues.longitude){\n        errors.longitude = \"Enter a Valid Value\"\n    }\n\n    return errors;\n};\n\nconst Search =  reduxForm({form: 'streamForm', validate})(SearchForm);\nconst searchcomponent = connect(null, {fetchlocation, fetch5dayforecast, fetchhourly, fetchtimezone, currentdetails, setcurrentcard})(Search);\n\nexport default searchcomponent;","import React from 'react';\nimport {connect} from 'react-redux';\n\nclass Current extends React.Component {\n\n    renderlocation(){\n        if (!this.props.location.location) {return null;}\n\n        if (!this.props.location.location.name) {return <h1>Unknown</h1>;}\n        return <h1>{`${this.props.location.location.name}, ${this.props.location.location.country}`}</h1>;\n\n    };\n\n    convert(unix_timestamp){\n        let date = new Date((unix_timestamp+this.props.timezone.timezoneoffset)* 1000);\n        let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n        let hours = date.getUTCHours();\n        let minutes = \"0\" + date.getMinutes();\n        let formattedTime = days[date.getUTCDay()] + ' ' + hours + ':' + minutes.substr(-2);\n        return formattedTime;\n    }\n\n    renderdetails(){\n        if (!this.props.current.current) {return null;}\n\n        return (\n            <React.Fragment> \n                <img src={`http://openweathermap.org/img/wn/${this.props.current.current.weather[0].icon}@2x.png`} alt = \"weathericon\" className = \"ui tiny image\"/>\n                <h3> \n                {`${this.props.current.current.temp} ${String.fromCharCode(176)}C,    ${this.convert(this.props.current.current.dt)},    Feels Like: ${this.props.current.current.feels_like} ${String.fromCharCode(176)}C`}\n                </h3>\n            </React.Fragment>\n        );\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                \n                <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n                    {this.renderlocation()}                   \n                </div>\n\n                <div style= {{display: \"flex\", justifyContent: \"center\"}}>\n                    {this.renderdetails()}                 \n                </div>\n\n            </React.Fragment>\n        );\n    };\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        location: state.locationreducer,\n        timezone: state.timezonereducer,\n        current: state.currentdetailsreducer\n    };\n};\n\nconst currentcomponent = connect(mapStateToProps, null)(Current);\nexport default currentcomponent;","import React from 'react';\nimport { Router } from 'react-router-dom';\n\nimport Card from './Card.js';\nimport Hourly from './Hourly.js';\nimport Search from './Search.js';\nimport history from '../history'\nimport Current from './Current.js';\n\nconst App = () =>{\n\n\n\n    return (\n    <div>\n        <Router history = {history}>\n            <br/>\n            <Current />\n            <br/>\n            <Search />\n            <br/>\n            <Card />\n            <br />\n            <Hourly />\n        </Router>\n    </div>\n    );\n};\n\nexport default App;","import {combineReducers} from 'redux';\nimport {reducer} from 'redux-form';\n\nimport {mainreducer, hourlyreducer, locationreducer, timezonereducer, currentcardreducer, currentdetailsreducer} from './mainreducer.js';\n\n\nexport default combineReducers({\n    mainreducer: mainreducer,\n    hourlyreducer: hourlyreducer,\n    form: reducer,\n    locationreducer: locationreducer,\n    timezonereducer: timezonereducer,\n    currentcardreducer: currentcardreducer,\n    currentdetailsreducer: currentdetailsreducer\n});","import _ from 'lodash'\n\nexport const mainreducer = (state = {}, action) =>{\n    switch(action.type){\n        case \"LIST_FORECAST\":\n            return {..._.mapKeys(action.payload, 'dt')};\n\n        default:\n            return state;\n    };\n};\n\nexport const hourlyreducer = (state = {}, action) =>{\n    switch(action.type){\n        case \"LIST_HOURLY\":\n            return {..._.mapKeys(action.payload, 'dt')};\n\n        default:\n            return state;\n    };\n};\n\nexport const locationreducer = (state = {}, action) =>{\n    switch(action.type){\n        case \"FETCH_LOCATION\":\n            return {...state, \"location\": action.payload};\n\n        default:\n            return state;\n    };\n};\n\nexport const timezonereducer = (state = {}, action) =>{\n    switch(action.type){\n        case \"FETCH_TIMEZONE\":\n            return {...state, \"timezoneoffset\": action.payload};\n\n        default:\n            return state;\n    };\n};\n\nexport const currentcardreducer = (state={\"graph\": \"temp\"}, action) => {\n    switch(action.type){\n        case \"SET_CURRENTCARD\":\n            return {...state, \"data\": action.payload}; \n\n        case \"SET_GRAPH\":\n            return {...state, \"graph\": action.payload};\n\n        default:\n            return state;\n    };\n\n}\n\nexport const currentdetailsreducer = (state={}, action) => {\n    switch(action.type){\n        case \"FETCH_CURRENTDETAILS\":\n            return {\"current\": action.payload};  \n        \n        default:\n            return state;\n    };\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}